// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import "License.pb.h"
// @@protoc_insertion_point(imports)

@implementation FPLicenseRoot
static PBExtensionRegistry* extensionRegistry = nil;
+ (PBExtensionRegistry*) extensionRegistry {
  return extensionRegistry;
}

+ (void) initialize {
  if (self == [FPLicenseRoot class]) {
    PBMutableExtensionRegistry* registry = [PBMutableExtensionRegistry registry];
    [self registerAllExtensions:registry];
    [ObjectivecDescriptorRoot registerAllExtensions:registry];
    extensionRegistry = registry;
  }
}
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry {
}
@end

@interface FPLicenseMetadata ()
@property (strong) NSString* name;
@property (strong) NSString* target;
@property (strong) NSString* licenseId;
@property SInt64 created;
@property (strong) NSData* additional;
@end

@implementation FPLicenseMetadata

- (BOOL) hasName {
  return !!hasName_;
}
- (void) setHasName:(BOOL) _value_ {
  hasName_ = !!_value_;
}
@synthesize name;
- (BOOL) hasTarget {
  return !!hasTarget_;
}
- (void) setHasTarget:(BOOL) _value_ {
  hasTarget_ = !!_value_;
}
@synthesize target;
- (BOOL) hasLicenseId {
  return !!hasLicenseId_;
}
- (void) setHasLicenseId:(BOOL) _value_ {
  hasLicenseId_ = !!_value_;
}
@synthesize licenseId;
- (BOOL) hasCreated {
  return !!hasCreated_;
}
- (void) setHasCreated:(BOOL) _value_ {
  hasCreated_ = !!_value_;
}
@synthesize created;
- (BOOL) hasAdditional {
  return !!hasAdditional_;
}
- (void) setHasAdditional:(BOOL) _value_ {
  hasAdditional_ = !!_value_;
}
@synthesize additional;
- (instancetype) init {
  if ((self = [super init])) {
    self.name = @"";
    self.target = @"";
    self.licenseId = @"";
    self.created = 0L;
    self.additional = [NSData data];
  }
  return self;
}
static FPLicenseMetadata* defaultFPLicenseMetadataInstance = nil;
+ (void) initialize {
  if (self == [FPLicenseMetadata class]) {
    defaultFPLicenseMetadataInstance = [[FPLicenseMetadata alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFPLicenseMetadataInstance;
}
- (instancetype) defaultInstance {
  return defaultFPLicenseMetadataInstance;
}
- (BOOL) isInitialized {
  if (!self.hasName) {
    return NO;
  }
  if (!self.hasTarget) {
    return NO;
  }
  if (!self.hasLicenseId) {
    return NO;
  }
  if (!self.hasCreated) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasName) {
    [output writeString:1 value:self.name];
  }
  if (self.hasTarget) {
    [output writeString:2 value:self.target];
  }
  if (self.hasLicenseId) {
    [output writeString:3 value:self.licenseId];
  }
  if (self.hasCreated) {
    [output writeInt64:4 value:self.created];
  }
  if (self.hasAdditional) {
    [output writeData:5 value:self.additional];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasName) {
    size_ += computeStringSize(1, self.name);
  }
  if (self.hasTarget) {
    size_ += computeStringSize(2, self.target);
  }
  if (self.hasLicenseId) {
    size_ += computeStringSize(3, self.licenseId);
  }
  if (self.hasCreated) {
    size_ += computeInt64Size(4, self.created);
  }
  if (self.hasAdditional) {
    size_ += computeDataSize(5, self.additional);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FPLicenseMetadata*) parseFromData:(NSData*) data {
  return (FPLicenseMetadata*)[[[FPLicenseMetadata builder] mergeFromData:data] build];
}
+ (FPLicenseMetadata*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FPLicenseMetadata*)[[[FPLicenseMetadata builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FPLicenseMetadata*) parseFromInputStream:(NSInputStream*) input {
  return (FPLicenseMetadata*)[[[FPLicenseMetadata builder] mergeFromInputStream:input] build];
}
+ (FPLicenseMetadata*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FPLicenseMetadata*)[[[FPLicenseMetadata builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FPLicenseMetadata*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FPLicenseMetadata*)[[[FPLicenseMetadata builder] mergeFromCodedInputStream:input] build];
}
+ (FPLicenseMetadata*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FPLicenseMetadata*)[[[FPLicenseMetadata builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FPLicenseMetadataBuilder*) builder {
  return [[FPLicenseMetadataBuilder alloc] init];
}
+ (FPLicenseMetadataBuilder*) builderWithPrototype:(FPLicenseMetadata*) prototype {
  return [[FPLicenseMetadata builder] mergeFrom:prototype];
}
- (FPLicenseMetadataBuilder*) builder {
  return [FPLicenseMetadata builder];
}
- (FPLicenseMetadataBuilder*) toBuilder {
  return [FPLicenseMetadata builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasName) {
    [output appendFormat:@"%@%@: %@\n", indent, @"name", self.name];
  }
  if (self.hasTarget) {
    [output appendFormat:@"%@%@: %@\n", indent, @"target", self.target];
  }
  if (self.hasLicenseId) {
    [output appendFormat:@"%@%@: %@\n", indent, @"licenseId", self.licenseId];
  }
  if (self.hasCreated) {
    [output appendFormat:@"%@%@: %@\n", indent, @"created", [NSNumber numberWithLongLong:self.created]];
  }
  if (self.hasAdditional) {
    [output appendFormat:@"%@%@: %@\n", indent, @"additional", self.additional];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasName) {
    [dictionary setObject: self.name forKey: @"name"];
  }
  if (self.hasTarget) {
    [dictionary setObject: self.target forKey: @"target"];
  }
  if (self.hasLicenseId) {
    [dictionary setObject: self.licenseId forKey: @"licenseId"];
  }
  if (self.hasCreated) {
    [dictionary setObject: [NSNumber numberWithLongLong:self.created] forKey: @"created"];
  }
  if (self.hasAdditional) {
    [dictionary setObject: self.additional forKey: @"additional"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FPLicenseMetadata class]]) {
    return NO;
  }
  FPLicenseMetadata *otherMessage = other;
  return
      self.hasName == otherMessage.hasName &&
      (!self.hasName || [self.name isEqual:otherMessage.name]) &&
      self.hasTarget == otherMessage.hasTarget &&
      (!self.hasTarget || [self.target isEqual:otherMessage.target]) &&
      self.hasLicenseId == otherMessage.hasLicenseId &&
      (!self.hasLicenseId || [self.licenseId isEqual:otherMessage.licenseId]) &&
      self.hasCreated == otherMessage.hasCreated &&
      (!self.hasCreated || self.created == otherMessage.created) &&
      self.hasAdditional == otherMessage.hasAdditional &&
      (!self.hasAdditional || [self.additional isEqual:otherMessage.additional]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasName) {
    hashCode = hashCode * 31 + [self.name hash];
  }
  if (self.hasTarget) {
    hashCode = hashCode * 31 + [self.target hash];
  }
  if (self.hasLicenseId) {
    hashCode = hashCode * 31 + [self.licenseId hash];
  }
  if (self.hasCreated) {
    hashCode = hashCode * 31 + [[NSNumber numberWithLongLong:self.created] hash];
  }
  if (self.hasAdditional) {
    hashCode = hashCode * 31 + [self.additional hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FPLicenseMetadataBuilder()
@property (strong) FPLicenseMetadata* resultLicenseMetadata;
@end

@implementation FPLicenseMetadataBuilder
@synthesize resultLicenseMetadata;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLicenseMetadata = [[FPLicenseMetadata alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLicenseMetadata;
}
- (FPLicenseMetadataBuilder*) clear {
  self.resultLicenseMetadata = [[FPLicenseMetadata alloc] init];
  return self;
}
- (FPLicenseMetadataBuilder*) clone {
  return [FPLicenseMetadata builderWithPrototype:resultLicenseMetadata];
}
- (FPLicenseMetadata*) defaultInstance {
  return [FPLicenseMetadata defaultInstance];
}
- (FPLicenseMetadata*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FPLicenseMetadata*) buildPartial {
  FPLicenseMetadata* returnMe = resultLicenseMetadata;
  self.resultLicenseMetadata = nil;
  return returnMe;
}
- (FPLicenseMetadataBuilder*) mergeFrom:(FPLicenseMetadata*) other {
  if (other == [FPLicenseMetadata defaultInstance]) {
    return self;
  }
  if (other.hasName) {
    [self setName:other.name];
  }
  if (other.hasTarget) {
    [self setTarget:other.target];
  }
  if (other.hasLicenseId) {
    [self setLicenseId:other.licenseId];
  }
  if (other.hasCreated) {
    [self setCreated:other.created];
  }
  if (other.hasAdditional) {
    [self setAdditional:other.additional];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FPLicenseMetadataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FPLicenseMetadataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        [self setName:[input readString]];
        break;
      }
      case 18: {
        [self setTarget:[input readString]];
        break;
      }
      case 26: {
        [self setLicenseId:[input readString]];
        break;
      }
      case 32: {
        [self setCreated:[input readInt64]];
        break;
      }
      case 42: {
        [self setAdditional:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasName {
  return resultLicenseMetadata.hasName;
}
- (NSString*) name {
  return resultLicenseMetadata.name;
}
- (FPLicenseMetadataBuilder*) setName:(NSString*) value {
  resultLicenseMetadata.hasName = YES;
  resultLicenseMetadata.name = value;
  return self;
}
- (FPLicenseMetadataBuilder*) clearName {
  resultLicenseMetadata.hasName = NO;
  resultLicenseMetadata.name = @"";
  return self;
}
- (BOOL) hasTarget {
  return resultLicenseMetadata.hasTarget;
}
- (NSString*) target {
  return resultLicenseMetadata.target;
}
- (FPLicenseMetadataBuilder*) setTarget:(NSString*) value {
  resultLicenseMetadata.hasTarget = YES;
  resultLicenseMetadata.target = value;
  return self;
}
- (FPLicenseMetadataBuilder*) clearTarget {
  resultLicenseMetadata.hasTarget = NO;
  resultLicenseMetadata.target = @"";
  return self;
}
- (BOOL) hasLicenseId {
  return resultLicenseMetadata.hasLicenseId;
}
- (NSString*) licenseId {
  return resultLicenseMetadata.licenseId;
}
- (FPLicenseMetadataBuilder*) setLicenseId:(NSString*) value {
  resultLicenseMetadata.hasLicenseId = YES;
  resultLicenseMetadata.licenseId = value;
  return self;
}
- (FPLicenseMetadataBuilder*) clearLicenseId {
  resultLicenseMetadata.hasLicenseId = NO;
  resultLicenseMetadata.licenseId = @"";
  return self;
}
- (BOOL) hasCreated {
  return resultLicenseMetadata.hasCreated;
}
- (SInt64) created {
  return resultLicenseMetadata.created;
}
- (FPLicenseMetadataBuilder*) setCreated:(SInt64) value {
  resultLicenseMetadata.hasCreated = YES;
  resultLicenseMetadata.created = value;
  return self;
}
- (FPLicenseMetadataBuilder*) clearCreated {
  resultLicenseMetadata.hasCreated = NO;
  resultLicenseMetadata.created = 0L;
  return self;
}
- (BOOL) hasAdditional {
  return resultLicenseMetadata.hasAdditional;
}
- (NSData*) additional {
  return resultLicenseMetadata.additional;
}
- (FPLicenseMetadataBuilder*) setAdditional:(NSData*) value {
  resultLicenseMetadata.hasAdditional = YES;
  resultLicenseMetadata.additional = value;
  return self;
}
- (FPLicenseMetadataBuilder*) clearAdditional {
  resultLicenseMetadata.hasAdditional = NO;
  resultLicenseMetadata.additional = [NSData data];
  return self;
}
@end

@interface FPLicense ()
@property (strong) FPLicenseMetadata* license;
@property (strong) NSData* signature;
@end

@implementation FPLicense

- (BOOL) hasLicense {
  return !!hasLicense_;
}
- (void) setHasLicense:(BOOL) _value_ {
  hasLicense_ = !!_value_;
}
@synthesize license;
- (BOOL) hasSignature {
  return !!hasSignature_;
}
- (void) setHasSignature:(BOOL) _value_ {
  hasSignature_ = !!_value_;
}
@synthesize signature;
- (instancetype) init {
  if ((self = [super init])) {
    self.license = [FPLicenseMetadata defaultInstance];
    self.signature = [NSData data];
  }
  return self;
}
static FPLicense* defaultFPLicenseInstance = nil;
+ (void) initialize {
  if (self == [FPLicense class]) {
    defaultFPLicenseInstance = [[FPLicense alloc] init];
  }
}
+ (instancetype) defaultInstance {
  return defaultFPLicenseInstance;
}
- (instancetype) defaultInstance {
  return defaultFPLicenseInstance;
}
- (BOOL) isInitialized {
  if (!self.hasLicense) {
    return NO;
  }
  if (!self.hasSignature) {
    return NO;
  }
  if (!self.license.isInitialized) {
    return NO;
  }
  return YES;
}
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output {
  if (self.hasLicense) {
    [output writeMessage:1 value:self.license];
  }
  if (self.hasSignature) {
    [output writeData:6 value:self.signature];
  }
  [self.unknownFields writeToCodedOutputStream:output];
}
- (SInt32) serializedSize {
  __block SInt32 size_ = memoizedSerializedSize;
  if (size_ != -1) {
    return size_;
  }

  size_ = 0;
  if (self.hasLicense) {
    size_ += computeMessageSize(1, self.license);
  }
  if (self.hasSignature) {
    size_ += computeDataSize(6, self.signature);
  }
  size_ += self.unknownFields.serializedSize;
  memoizedSerializedSize = size_;
  return size_;
}
+ (FPLicense*) parseFromData:(NSData*) data {
  return (FPLicense*)[[[FPLicense builder] mergeFromData:data] build];
}
+ (FPLicense*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FPLicense*)[[[FPLicense builder] mergeFromData:data extensionRegistry:extensionRegistry] build];
}
+ (FPLicense*) parseFromInputStream:(NSInputStream*) input {
  return (FPLicense*)[[[FPLicense builder] mergeFromInputStream:input] build];
}
+ (FPLicense*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FPLicense*)[[[FPLicense builder] mergeFromInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FPLicense*) parseFromCodedInputStream:(PBCodedInputStream*) input {
  return (FPLicense*)[[[FPLicense builder] mergeFromCodedInputStream:input] build];
}
+ (FPLicense*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  return (FPLicense*)[[[FPLicense builder] mergeFromCodedInputStream:input extensionRegistry:extensionRegistry] build];
}
+ (FPLicenseBuilder*) builder {
  return [[FPLicenseBuilder alloc] init];
}
+ (FPLicenseBuilder*) builderWithPrototype:(FPLicense*) prototype {
  return [[FPLicense builder] mergeFrom:prototype];
}
- (FPLicenseBuilder*) builder {
  return [FPLicense builder];
}
- (FPLicenseBuilder*) toBuilder {
  return [FPLicense builderWithPrototype:self];
}
- (void) writeDescriptionTo:(NSMutableString*) output withIndent:(NSString*) indent {
  if (self.hasLicense) {
    [output appendFormat:@"%@%@ {\n", indent, @"license"];
    [self.license writeDescriptionTo:output
                         withIndent:[NSString stringWithFormat:@"%@  ", indent]];
    [output appendFormat:@"%@}\n", indent];
  }
  if (self.hasSignature) {
    [output appendFormat:@"%@%@: %@\n", indent, @"signature", self.signature];
  }
  [self.unknownFields writeDescriptionTo:output withIndent:indent];
}
- (void) storeInDictionary:(NSMutableDictionary *)dictionary {
  if (self.hasLicense) {
   NSMutableDictionary *messageDictionary = [NSMutableDictionary dictionary]; 
   [self.license storeInDictionary:messageDictionary];
   [dictionary setObject:[NSDictionary dictionaryWithDictionary:messageDictionary] forKey:@"license"];
  }
  if (self.hasSignature) {
    [dictionary setObject: self.signature forKey: @"signature"];
  }
  [self.unknownFields storeInDictionary:dictionary];
}
- (BOOL) isEqual:(id)other {
  if (other == self) {
    return YES;
  }
  if (![other isKindOfClass:[FPLicense class]]) {
    return NO;
  }
  FPLicense *otherMessage = other;
  return
      self.hasLicense == otherMessage.hasLicense &&
      (!self.hasLicense || [self.license isEqual:otherMessage.license]) &&
      self.hasSignature == otherMessage.hasSignature &&
      (!self.hasSignature || [self.signature isEqual:otherMessage.signature]) &&
      (self.unknownFields == otherMessage.unknownFields || (self.unknownFields != nil && [self.unknownFields isEqual:otherMessage.unknownFields]));
}
- (NSUInteger) hash {
  __block NSUInteger hashCode = 7;
  if (self.hasLicense) {
    hashCode = hashCode * 31 + [self.license hash];
  }
  if (self.hasSignature) {
    hashCode = hashCode * 31 + [self.signature hash];
  }
  hashCode = hashCode * 31 + [self.unknownFields hash];
  return hashCode;
}
@end

@interface FPLicenseBuilder()
@property (strong) FPLicense* resultLicense;
@end

@implementation FPLicenseBuilder
@synthesize resultLicense;
- (instancetype) init {
  if ((self = [super init])) {
    self.resultLicense = [[FPLicense alloc] init];
  }
  return self;
}
- (PBGeneratedMessage*) internalGetResult {
  return resultLicense;
}
- (FPLicenseBuilder*) clear {
  self.resultLicense = [[FPLicense alloc] init];
  return self;
}
- (FPLicenseBuilder*) clone {
  return [FPLicense builderWithPrototype:resultLicense];
}
- (FPLicense*) defaultInstance {
  return [FPLicense defaultInstance];
}
- (FPLicense*) build {
  [self checkInitialized];
  return [self buildPartial];
}
- (FPLicense*) buildPartial {
  FPLicense* returnMe = resultLicense;
  self.resultLicense = nil;
  return returnMe;
}
- (FPLicenseBuilder*) mergeFrom:(FPLicense*) other {
  if (other == [FPLicense defaultInstance]) {
    return self;
  }
  if (other.hasLicense) {
    [self mergeLicense:other.license];
  }
  if (other.hasSignature) {
    [self setSignature:other.signature];
  }
  [self mergeUnknownFields:other.unknownFields];
  return self;
}
- (FPLicenseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input {
  return [self mergeFromCodedInputStream:input extensionRegistry:[PBExtensionRegistry emptyRegistry]];
}
- (FPLicenseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry {
  PBUnknownFieldSetBuilder* unknownFields = [PBUnknownFieldSet builderWithUnknownFields:self.unknownFields];
  while (YES) {
    SInt32 tag = [input readTag];
    switch (tag) {
      case 0:
        [self setUnknownFields:[unknownFields build]];
        return self;
      default: {
        if (![self parseUnknownField:input unknownFields:unknownFields extensionRegistry:extensionRegistry tag:tag]) {
          [self setUnknownFields:[unknownFields build]];
          return self;
        }
        break;
      }
      case 10: {
        FPLicenseMetadataBuilder* subBuilder = [FPLicenseMetadata builder];
        if (self.hasLicense) {
          [subBuilder mergeFrom:self.license];
        }
        [input readMessage:subBuilder extensionRegistry:extensionRegistry];
        [self setLicense:[subBuilder buildPartial]];
        break;
      }
      case 50: {
        [self setSignature:[input readData]];
        break;
      }
    }
  }
}
- (BOOL) hasLicense {
  return resultLicense.hasLicense;
}
- (FPLicenseMetadata*) license {
  return resultLicense.license;
}
- (FPLicenseBuilder*) setLicense:(FPLicenseMetadata*) value {
  resultLicense.hasLicense = YES;
  resultLicense.license = value;
  return self;
}
- (FPLicenseBuilder*) setLicenseBuilder:(FPLicenseMetadataBuilder*) builderForValue {
  return [self setLicense:[builderForValue build]];
}
- (FPLicenseBuilder*) mergeLicense:(FPLicenseMetadata*) value {
  if (resultLicense.hasLicense &&
      resultLicense.license != [FPLicenseMetadata defaultInstance]) {
    resultLicense.license =
      [[[FPLicenseMetadata builderWithPrototype:resultLicense.license] mergeFrom:value] buildPartial];
  } else {
    resultLicense.license = value;
  }
  resultLicense.hasLicense = YES;
  return self;
}
- (FPLicenseBuilder*) clearLicense {
  resultLicense.hasLicense = NO;
  resultLicense.license = [FPLicenseMetadata defaultInstance];
  return self;
}
- (BOOL) hasSignature {
  return resultLicense.hasSignature;
}
- (NSData*) signature {
  return resultLicense.signature;
}
- (FPLicenseBuilder*) setSignature:(NSData*) value {
  resultLicense.hasSignature = YES;
  resultLicense.signature = value;
  return self;
}
- (FPLicenseBuilder*) clearSignature {
  resultLicense.hasSignature = NO;
  resultLicense.signature = [NSData data];
  return self;
}
@end


// @@protoc_insertion_point(global_scope)
