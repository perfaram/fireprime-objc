// Generated by the protocol buffer compiler.  DO NOT EDIT!

#import <ProtocolBuffers/ProtocolBuffers.h>

// @@protoc_insertion_point(imports)

@class FPLicense;
@class FPLicenseBuilder;
@class FPMetadata;
@class FPMetadataBuilder;
@class ObjectiveCFileOptions;
@class ObjectiveCFileOptionsBuilder;
@class PBDescriptorProto;
@class PBDescriptorProtoBuilder;
@class PBDescriptorProtoExtensionRange;
@class PBDescriptorProtoExtensionRangeBuilder;
@class PBDescriptorProtoReservedRange;
@class PBDescriptorProtoReservedRangeBuilder;
@class PBEnumDescriptorProto;
@class PBEnumDescriptorProtoBuilder;
@class PBEnumOptions;
@class PBEnumOptionsBuilder;
@class PBEnumValueDescriptorProto;
@class PBEnumValueDescriptorProtoBuilder;
@class PBEnumValueOptions;
@class PBEnumValueOptionsBuilder;
@class PBFieldDescriptorProto;
@class PBFieldDescriptorProtoBuilder;
@class PBFieldOptions;
@class PBFieldOptionsBuilder;
@class PBFileDescriptorProto;
@class PBFileDescriptorProtoBuilder;
@class PBFileDescriptorSet;
@class PBFileDescriptorSetBuilder;
@class PBFileOptions;
@class PBFileOptionsBuilder;
@class PBMessageOptions;
@class PBMessageOptionsBuilder;
@class PBMethodDescriptorProto;
@class PBMethodDescriptorProtoBuilder;
@class PBMethodOptions;
@class PBMethodOptionsBuilder;
@class PBOneofDescriptorProto;
@class PBOneofDescriptorProtoBuilder;
@class PBServiceDescriptorProto;
@class PBServiceDescriptorProtoBuilder;
@class PBServiceOptions;
@class PBServiceOptionsBuilder;
@class PBSourceCodeInfo;
@class PBSourceCodeInfoBuilder;
@class PBSourceCodeInfoLocation;
@class PBSourceCodeInfoLocationBuilder;
@class PBUninterpretedOption;
@class PBUninterpretedOptionBuilder;
@class PBUninterpretedOptionNamePart;
@class PBUninterpretedOptionNamePartBuilder;



@interface FPLicenseRoot : NSObject {
}
+ (PBExtensionRegistry*) extensionRegistry;
+ (void) registerAllExtensions:(PBMutableExtensionRegistry*) registry;
@end

#define Metadata_name @"name"
#define Metadata_target @"target"
#define Metadata_licenseId @"licenseId"
#define Metadata_created @"created"
#define Metadata_additional @"additional"
@interface FPMetadata : PBGeneratedMessage<GeneratedMessageProtocol> {
@private
  BOOL hasCreated_:1;
  BOOL hasName_:1;
  BOOL hasTarget_:1;
  BOOL hasLicenseId_:1;
  BOOL hasAdditional_:1;
  SInt64 created;
  NSString* name;
  NSString* target;
  NSString* licenseId;
  NSData* additional;
}
- (BOOL) hasName;
- (BOOL) hasTarget;
- (BOOL) hasLicenseId;
- (BOOL) hasCreated;
- (BOOL) hasAdditional;
@property (readonly, strong) NSString* name;
@property (readonly, strong) NSString* target;
@property (readonly, strong) NSString* licenseId;
@property (readonly) SInt64 created;
@property (readonly, strong) NSData* additional;

+ (instancetype) defaultInstance;
- (instancetype) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (FPMetadataBuilder*) builder;
+ (FPMetadataBuilder*) builder;
+ (FPMetadataBuilder*) builderWithPrototype:(FPMetadata*) prototype;
- (FPMetadataBuilder*) toBuilder;

+ (FPMetadata*) parseFromData:(NSData*) data;
+ (FPMetadata*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (FPMetadata*) parseFromInputStream:(NSInputStream*) input;
+ (FPMetadata*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (FPMetadata*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (FPMetadata*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface FPMetadataBuilder : PBGeneratedMessageBuilder {
@private
  FPMetadata* resultMetadata;
}

- (FPMetadata*) defaultInstance;

- (FPMetadataBuilder*) clear;
- (FPMetadataBuilder*) clone;

- (FPMetadata*) build;
- (FPMetadata*) buildPartial;

- (FPMetadataBuilder*) mergeFrom:(FPMetadata*) other;
- (FPMetadataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (FPMetadataBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasName;
- (NSString*) name;
- (FPMetadataBuilder*) setName:(NSString*) value;
- (FPMetadataBuilder*) clearName;

- (BOOL) hasTarget;
- (NSString*) target;
- (FPMetadataBuilder*) setTarget:(NSString*) value;
- (FPMetadataBuilder*) clearTarget;

- (BOOL) hasLicenseId;
- (NSString*) licenseId;
- (FPMetadataBuilder*) setLicenseId:(NSString*) value;
- (FPMetadataBuilder*) clearLicenseId;

- (BOOL) hasCreated;
- (SInt64) created;
- (FPMetadataBuilder*) setCreated:(SInt64) value;
- (FPMetadataBuilder*) clearCreated;

- (BOOL) hasAdditional;
- (NSData*) additional;
- (FPMetadataBuilder*) setAdditional:(NSData*) value;
- (FPMetadataBuilder*) clearAdditional;
@end

#define License_license @"license"
#define License_signature @"signature"
@interface FPLicense : PBGeneratedMessage<GeneratedMessageProtocol> {
@private
  BOOL hasLicense_:1;
  BOOL hasSignature_:1;
  FPMetadata* license;
  NSData* signature;
}
- (BOOL) hasLicense;
- (BOOL) hasSignature;
@property (readonly, strong) FPMetadata* license;
@property (readonly, strong) NSData* signature;

+ (instancetype) defaultInstance;
- (instancetype) defaultInstance;

- (BOOL) isInitialized;
- (void) writeToCodedOutputStream:(PBCodedOutputStream*) output;
- (FPLicenseBuilder*) builder;
+ (FPLicenseBuilder*) builder;
+ (FPLicenseBuilder*) builderWithPrototype:(FPLicense*) prototype;
- (FPLicenseBuilder*) toBuilder;

+ (FPLicense*) parseFromData:(NSData*) data;
+ (FPLicense*) parseFromData:(NSData*) data extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (FPLicense*) parseFromInputStream:(NSInputStream*) input;
+ (FPLicense*) parseFromInputStream:(NSInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
+ (FPLicense*) parseFromCodedInputStream:(PBCodedInputStream*) input;
+ (FPLicense*) parseFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;
@end

@interface FPLicenseBuilder : PBGeneratedMessageBuilder {
@private
  FPLicense* resultLicense;
}

- (FPLicense*) defaultInstance;

- (FPLicenseBuilder*) clear;
- (FPLicenseBuilder*) clone;

- (FPLicense*) build;
- (FPLicense*) buildPartial;

- (FPLicenseBuilder*) mergeFrom:(FPLicense*) other;
- (FPLicenseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input;
- (FPLicenseBuilder*) mergeFromCodedInputStream:(PBCodedInputStream*) input extensionRegistry:(PBExtensionRegistry*) extensionRegistry;

- (BOOL) hasLicense;
- (FPMetadata*) license;
- (FPLicenseBuilder*) setLicense:(FPMetadata*) value;
- (FPLicenseBuilder*) setLicenseBuilder:(FPMetadataBuilder*) builderForValue;
- (FPLicenseBuilder*) mergeLicense:(FPMetadata*) value;
- (FPLicenseBuilder*) clearLicense;

- (BOOL) hasSignature;
- (NSData*) signature;
- (FPLicenseBuilder*) setSignature:(NSData*) value;
- (FPLicenseBuilder*) clearSignature;
@end


// @@protoc_insertion_point(global_scope)
